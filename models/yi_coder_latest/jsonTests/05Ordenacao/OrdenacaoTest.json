{
    "className": "Ordenacao",
    "testMethods": [
        {
            "methodName": "testOrdenaWithEmptyArray",
            "code": "@Test \\nvoid testOrdenaWithEmptyArray(){\\n int[] array = new int[0];\\n Ordenacao.ordena(array, 0);\\n assertArrayEquals(new int[0], array);\\n}"
        },
        {
            "methodName": "testOrdenaWithOneElementArray",
            "code": "@Test \\nvoid testOrdenaWithOneElementArray(){\\n int[] array = {1};\\n Ordenacao.ordena(array, 1);\\n assertArrayEquals(new int[]{1}, array);\\n}"
        },
        {
            "methodName": "testOrdenaWithMultipleElementsArrayInOrder",
            "code": "@Test \\nvoid testOrdenaWithMultipleElementsArrayInOrder(){\\n int[] array = {1, 2, 3};\\n Ordenacao.ordena(array, 3);\\n assertArrayEquals(new int[]{1, 2, 3}, array);\\n}"
        },
        {
            "methodName": "testOrdenaWithMultipleElementsArrayNotInOrder",
            "code": "@Test \\nvoid testOrdenaWithMultipleElementsArrayNotInOrder(){\\n int[] array = {3, 2, 1};\\n Ordenacao.ordena(array, 3);\\n assertArrayEquals(new int[]{1, 2, 3}, array);\\n}"
        },
        {
            "methodName": "testOrdenaWithMultipleElementsArrayRandomOrder",
            "code": "@Test \\nvoid testOrdenaWithMultipleElementsArrayRandomOrder(){\\n int[] array = {5, 1, 9, 3, 7};\\n Ordenacao.ordena(array, 5);\\n assertArrayEquals(new int[]{1, 3, 5, 7, 9}, array);\\n}"
        }
    ]
}