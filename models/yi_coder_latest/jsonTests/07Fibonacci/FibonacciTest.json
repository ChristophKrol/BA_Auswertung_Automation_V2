{
    "className": "Fibonacci",
    "testMethods": [
        {
            "methodName": "testFibIterWithNegativeNumber",
            "code": "@Test \\nvoid testFibIterWithNegativeNumber() throws Exception {\\n  try {\\n      Fibonacci.fibIter(-5);\\n      fail(\"Expected an IllegalArgumentException to be thrown.\");\\n  } catch (IllegalArgumentException exception) {}\\n}"
        },
        {
            "methodName": "testFibIterWithZero",
            "code": "@Test \\nvoid testFibIterWithZero() {\\n assertEquals(0, Fibonacci.fibIter(0));\\n}"
        },
        {
            "methodName": "testFibIterWithOne",
            "code": "@Test \\nvoid testFibIterWithOne() {\\n assertEquals(1, Fibonacci.fibIter(1));\\n}"
        },
        {
            "methodName": "testFibIterWithTwo",
            "code": "@Test \\nvoid testFibIterWithTwo() {\\n assertEquals(1, Fibonacci.fibIter(2));\\n}"
        },
        {
            "methodName": "testFibIterWithThree",
            "code": "@Test \\nvoid testFibIterWithThree() {\\n assertEquals(2, Fibonacci.fibIter(3));\\n}"
        },
        {
            "methodName": "testFibIterWithTen",
            "code": "@Test \\nvoid testFibIterWithTen() {\\n assertEquals(55, Fibonacci.fibIter(10));\\n}"
        }
    ]
}