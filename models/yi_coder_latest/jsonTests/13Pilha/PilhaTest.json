{
    "className": "Pilha",
    "testMethods": [
        {
            "methodName": "testEmpilhaWithFullStack",
            "code": "@Test \\nvoid testEmpilhaWithFullStack() throws Exception {\\n  Pilha pilha = new Pilha();\\n  for (int i=0; i<1000; i++) { pilha.empilha(new Object()); }\\n  try { pilha.empilha(new Object()); assertTrue(false); } catch (Exception e) { assertEquals(\"Erro: A pilha esta cheia\", e.getMessage()); }\\n}\\n"
        },
        {
            "methodName": "testDesempilhaWithEmptyStack",
            "code": "@Test \\nvoid testDesempilhaWithEmptyStack() throws Exception {\\n  Pilha pilha = new Pilha();\\n  try { pilha.desempilha(); assertTrue(false); } catch (Exception e) { assertEquals(\"Erro: A pilha esta vazia\", e.getMessage()); }\\n}\\n"
        },
        {
            "methodName": "testVaziaWithEmptyStack",
            "code": "@Test \\nvoid testVaziaWithEmptyStack() {\\n  Pilha pilha = new Pilha();\\n  assertTrue(pilha.vazia());\\n}\\n"
        },
        {
            "methodName": "testVaziaWithNonEmptyStack",
            "code": "@Test \\nvoid testVaziaWithNonEmptyStack() throws Exception {\\n  Pilha pilha = new Pilha();\\n  pilha.empilha(new Object());\\n  assertFalse(pilha.vazia());\\n}\\n"
        },
        {
            "methodName": "testTamanhoWithEmptyStack",
            "code": "@Test \\nvoid testTamanhoWithEmptyStack() {\\n  Pilha pilha = new Pilha();\\n  assertEquals(0, pilha.tamanho());\\n}\\n"
        },
        {
            "methodName": "testTamanhoWithNonEmptyStack",
            "code": "@Test \\nvoid testTamanhoWithNonEmptyStack() throws Exception {\\n  Pilha pilha = new Pilha();\\n  pilha.empilha(new Object());\\n  assertEquals(1, pilha.tamanho());\\n}\\n"
        }
    ]
}