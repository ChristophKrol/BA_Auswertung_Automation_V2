{
    "className": "Ordenacao",
    "testMethods": [
        {
            "methodName": "testMergeSortEmptyArray",
            "code": "@Test \\nvoid testMergeSortEmptyArray(){\\n int[] array = new int[0];\\n MaxOrdenacao.mergeSort(array, 0, array.length);\\n assertArrayEquals(new int[0], array);\\n}"
        },
        {
            "methodName": "testMergeSortSingleElementArray",
            "code": "@Test \\nvoid testMergeSortSingleElementArray(){\\n int[] array = new int[]{5};\\n MaxOrdenacao.mergeSort(array, 0, array.length);\\n assertArrayEquals(new int[]{5}, array);\\n}"
        },
        {
            "methodName": "testMergeSortMultipleElementsArray",
            "code": "@Test \\nvoid testMergeSortMultipleElementsArray(){\\n int[] array = new int[]{3, 1, 4};\\n MaxOrdenacao.mergeSort(array, 0, array.length);\\n assertArrayEquals(new int[]{1, 3, 4}, array);\\n}"
        },
        {
            "methodName": "testMergeSortBoundaryValues",
            "code": "@Test \\nvoid testMergeSortBoundaryValues(){\\n int[] array = new int[]{-5, -2, 0, 2, 5};\\n MaxOrdenacao.mergeSort(array, 0, array.length);\\n assertArrayEquals(new int[]{-5, -2, 0, 2, 5}, array);\\n}"
        },
        {
            "methodName": "testMerge",
            "code": "@Test \\nvoid testMerge(){\\n int[] left = new int[]{1, 3, 5};\\n int[] right = new int[]{2, 4, 6};\\n int[] expected = new int[]{1, 2, 3, 4, 5, 6};\\n int[] actual = new int[6];\\n MaxOrdenacao.merge(actual, 0, left.length, 3);\\n System.arraycopy(right, 0, actual, 3, right.length);\\n assertArrayEquals(expected, actual);\\n}"
        }
    ]
}