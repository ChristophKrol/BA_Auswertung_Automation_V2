{
    "className": "Fibonacci",
    "testMethods": [
        {
            "methodName": "testFibIterWithNegativeInput",
            "code": "@Test \\nvoid testFibIterWithNegativeInput(){\\n assertThrows(IllegalArgumentException.class, () -> Fibonacci.fibIter(-1));\\n}"
        },
        {
            "methodName": "testFibIterWithZeroInput",
            "code": "@Test \\nvoid testFibIterWithZeroInput(){\\n assertEquals(0, Fibonacci.fibIter(0));\\n}"
        },
        {
            "methodName": "testFibIterWithOneInput",
            "code": "@Test \\nvoid testFibIterWithOneInput(){\\n assertEquals(1, Fibonacci.fibIter(1));\\n}"
        },
        {
            "methodName": "testFibIterWithTwoInput",
            "code": "@Test \\nvoid testFibIterWithTwoInput(){\\n assertEquals(1, Fibonacci.fibIter(2));\\n}"
        },
        {
            "methodName": "testFibIterWithThreeInput",
            "code": "@Test \\nvoid testFibIterWithThreeInput(){\\n assertEquals(2, Fibonacci.fibIter(3));\\n}"
        },
        {
            "methodName": "testFibIterWithFourInput",
            "code": "@Test \\nvoid testFibIterWithFourInput(){\\n assertEquals(3, Fibonacci.fibIter(4));\\n}"
        },
        {
            "methodName": "testFibIterWithFiveInput",
            "code": "@Test \\nvoid testFibIterWithFiveInput(){\\n assertEquals(5, Fibonacci.fibIter(5));\\n}"
        },
        {
            "methodName": "testFibIterWithSixInput",
            "code": "@Test \\nvoid testFibIterWithSixInput(){\\n assertEquals(8, Fibonacci.fibIter(6));\\n}"
        }
    ]
}