{
    "className": "Grafo",
    "testMethods": [
        {
            "methodName": "testInsereAresta",
            "code": "@Test \nvoid testInsereAresta(){\\n assertEquals(1, grafo.mat[0][1]);\\n}"
        },
        {
            "methodName": "testExisteAresta",
            "code": "@Test \\nvoid testExisteAresta(){\\n assertTrue(grafo.existeAresta(0, 1));\\n}"
        },
        {
            "methodName": "testListaAdjVazia",
            "code": "@Test \\nvoid testListaAdjVazia(){\\n assertFalse(grafo.listaAdjVazia(0));\\n}"
        },
        {
            "methodName": "testPrimeiroListaAdj",
            "code": "@Test \\nvoid testPrimeiroListaAdj(){\\n Aresta adj = grafo.primeiroListaAdj(0);\\n assertEquals(1, adj.v2());\\n}"
        },
        {
            "methodName": "testProxAdj",
            "code": "@Test \\nvoid testProxAdj(){\\n Aresta adj = grafo.proxAdj(0);\\n assertEquals(1, adj.v2());\\n}"
        },
        {
            "methodName": "testRetiraAresta",
            "code": "@Test \\nvoid testRetiraAresta(){\\n Aresta aresta = grafo.retiraAresta(0, 1);\\n assertEquals(1, aresta.v2());\\n}"
        },
        {
            "methodName": "testImprime",
            "code": "@Test \\nvoid testImprime(){\\n String expected = \"  0  1  2  3  4  5  6  7  8  9  \";\\n String actual = grafo.imprime();\\n assertEquals(expected, actual);\\n}"
        },
        {
            "methodName": "testGrafoTransposto",
            "code": "@Test \\nvoid testGrafoTransposto(){\\n Grafo grafoT = grafo.grafoTransposto();\\n assertEquals(1, grafoT.mat[0][1]);\\n}"
        }
    ]
}