{
    "className": "Grafo",
    "testMethods": [
        {
            "methodName": "testInsereAresta",
            "code": "@Test\nvoid testInsereAresta() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertEquals(5, grafo.mat[0][1]);\n}"
        },
        {
            "methodName": "testExisteAresta",
            "code": "@Test\nvoid testExisteAresta() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertTrue(grafo.existeAresta(0, 1));\n}"
        },
        {
            "methodName": "testListaAdjVazia",
            "code": "@Test\nvoid testListaAdjVazia() {\n    Grafo grafo = new Grafo();\n    assertTrue(grafo.listaAdjVazia(0));\n}"
        },
        {
            "methodName": "testPrimeiroListaAdj",
            "code": "@Test\nvoid testPrimeiroListaAdj() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertEquals(new Aresta(0, 1, 5), grafo.primeiroListaAdj(0));\n}"
        },
        {
            "methodName": "testProxAdj",
            "code": "@Test\nvoid testProxAdj() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertEquals(new Aresta(0, 1, 5), grafo.proxAdj(0));\n}"
        },
        {
            "methodName": "testRetiraAresta",
            "code": "@Test\nvoid testRetiraAresta() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertEquals(new Aresta(0, 1, 5), grafo.retirarAresta(0, 1));\n}"
        },
        {
            "methodName": "testImprime",
            "code": "@Test\nvoid testImprime() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    grafo.imprime();\n}"
        },
        {
            "methodName": "testGrafoTransposto",
            "code": "@Test\nvoid testGrafoTransposto() {\n    Grafo grafo = new Grafo();\n    grafo.insereAresta(0, 1, 5);\n    assertEquals(new Grafo(), grafo.grafoTransposto());\n}"
        }
    ]
}