"{\"className\":\"BuscaEmProfundidadeTest\",\"testMethods\":[{\"methodName\":\"testVisitaDfsWithValidVertex\",\"code\":\"@Test\\npublic void testVisitaDfsWithValidVertex() throws Exception {\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n\\n    int[] cor = new int[3];\\n    Arrays.fill(cor, BuscaEmProfundidade.branco);\\n    busca.visitaDfs(0, 0, cor);\\n\\n    assertEquals(BuscaEmProfundidade.preto, cor[0]);\\n    assertEquals(BuscaEmProfundidade.preto, cor[1]);\\n    assertEquals(BuscaEmProfundidade.preto, cor[2]);\\n}\"},{\"methodName\":\"testVisitaDfsWithIsolation\",\"code\":\"@Test\\npublic void testVisitaDfsWithIsolation() throws Exception {\\n    Grafo grafo = new Grafo(1);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n\\n    int[] cor = new int[1];\\n    Arrays.fill(cor, BuscaEmProfundidade.branco);\\n    int tempo = busca.visitaDfs(0, 0, cor);\\n    assertEquals(1, tempo);\\n    assertEquals(BuscaEmProfundidade.preto, cor[0]);\\n}\"},{\"methodName\":\"testBuscaEmProfundidadeOnDisconnectedGraph\",\"code\":\"@Test\\npublic void testBuscaEmProfundidadeOnDisconnectedGraph() throws Exception {\\n    Grafo grafo = new Grafo(4);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(2, 3, 1);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n\\n    busca.buscaEmProfundidade();\\n\\n    assertEquals(1, busca.d(0));\\n    assertEquals(2, busca.d(1));\\n    assertEquals(1, busca.d(2));\\n    assertEquals(2, busca.d(3));\\n}\"},{\"methodName\":\"testDForValidVertex\",\"code\":\"@Test\\npublic void testDForValidVertex() throws Exception {\\n    Grafo grafo = new Grafo(2);\\n    grafo.insereAresta(0, 1, 1);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n    busca.buscaEmProfundidade();\\n\\n    assertTrue(busca.d(1) > busca.d(0));\\n}\"},{\"methodName\":\"testDForInvalidVertex\",\"code\":\"@Test\\npublic void testDForInvalidVertex() {\\n    Grafo grafo = new Grafo(2);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n\\n    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> { \\n        busca.d(5);\\n    });\\n}\"}]}"