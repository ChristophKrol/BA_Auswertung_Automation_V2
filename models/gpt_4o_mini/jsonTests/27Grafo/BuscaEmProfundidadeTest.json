"{\"className\":\"BuscaEmProfundidadeTest\",\"testMethods\":[{\"methodName\":\"testVisitaDfsWithWhiteVertex\",\"code\":\"@Test\\npublic void testVisitaDfsWithWhiteVertex() throws Exception {\\n    // Arrange\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n    int[] cor = new int[3];\\n    int tempo = 0;\\n\\n    // Act\\n    tempo = busca.visitaDfs(0, tempo, cor);\\n\\n    // Assert\\n    assertEquals(1, busca.d(0));\\n    assertEquals(2, busca.t(0));\\n    assertEquals(BuscaEmProfundidade.cinza, cor[0]);\\n    assertEquals(BuscaEmProfundidade.preto, cor[0]);\\n}\"},{\"methodName\":\"testVisitaDfsWithAdjacentVertices\",\"code\":\"@Test\\npublic void testVisitaDfsWithAdjacentVertices() throws Exception {\\n    // Arrange\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    busca = new BuscaEmProfundidade(grafo);\\n    int[] cor = new int[3];\\n    int tempo = 0;\\n\\n    // Act\\n    busca.visitaDfs(1, tempo, cor);\\n\\n    // Assert\\n    assertEquals(1, busca.d(1));\\n    assertEquals(BuscaEmProfundidade.cinza, cor[1]);\\n    assertEquals(BuscaEmProfundidade.preto, cor[0]);\\n}\"},{\"methodName\":\"testBuscaEmProfundidadeWithNoEdges\",\"code\":\"@Test\\npublic void testBuscaEmProfundidadeWithNoEdges() throws Exception {\\n    // Arrange\\n    Grafo grafo = new Grafo(3);\\n    BuscaEmProfundidade busca = new BuscaEmProfundidade(grafo);\\n\\n    // Act\\n    busca.buscaEmProfundidade();\\n\\n    // Assert\\n    assertEquals(0, busca.d(0));\\n    assertEquals(0, busca.t(0));\\n    assertEquals(-1, busca.antecessor(0));\\n}\"},{\"methodName\":\"testBuscaEmProfundidadeWithMultipleEdges\",\"code\":\"@Test\\npublic void testBuscaEmProfundidadeWithMultipleEdges() throws Exception {\\n    // Arrange\\n    Grafo grafo = new Grafo(4);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(0, 2, 1);\\n    grafo.insereAresta(1, 3, 1);\\n    busca = new BuscaEmProfundidade(grafo);\\n\\n    // Act\\n    busca.buscaEmProfundidade();\\n\\n    // Assert\\n    assertEquals(0, busca.d(0));\\n    assertEquals(0, busca.t(0));\\n    assertEquals(-1, busca.antecessor(0));\\n    assertEquals(1, busca.d(1));\\n    assertEquals(2, busca.t(1));\\n}\"},{\"methodName\":\"testBuscaEmProfundidadeWithCycle\",\"code\":\"@Test\\npublic void testBuscaEmProfundidadeWithCycle() throws Exception {\\n    // Arrange\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    grafo.insereAresta(2, 0, 1);\\n    busca = new BuscaEmProfundidade(grafo);\\n\\n    // Act\\n    busca.buscaEmProfundidade();\\n\\n    // Assert\\n    assertEquals(0, busca.d(0));\\n    assertEquals(3, busca.t(0));\\n    assertEquals(-1, busca.antecessor(0));\\n}\"},{\"methodName\":\"testSeekVertexForNegativeIndex\",\"code\":\"@Test\\npublic void testSeekVertexForNegativeIndex() {\\n    // Arrange\\n    grafo = new Grafo(3);\\n    busca = new BuscaEmProfundidade(grafo);\\n\\n    // Act & Assert\\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\\n        busca.d(-1);\\n    });\\n}\"},{\"methodName\":\"testSeekVertexForExceedingIndex\",\"code\":\"@Test\\npublic void testSeekVertexForExceedingIndex() {\\n    // Arrange\\n    grafo = new Grafo(3);\\n    busca = new BuscaEmProfundidade(grafo);\\n\\n    // Act & Assert\\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\\n        busca.t(3);\\n    });\\n}\"}]}"