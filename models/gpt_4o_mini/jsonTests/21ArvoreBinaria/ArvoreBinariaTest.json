"{\"className\":\"ArvoreBinariaTest\",\"testMethods\":[{\"methodName\":\"testInsertAndSearch\",\"code\":\"@Test\\npublic void testInsertAndSearch() throws Exception {\\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    MeuItem item = new MeuItem(5);\\n    arvore.insere(item);\\n    assertNotNull(arvore.pesquisa(item));\\n    MeuItem itemNotFound = new MeuItem(10);\\n    assertNull(arvore.pesquisa(itemNotFound));\\n}\"},{\"methodName\":\"testInsertDuplicates\",\"code\":\"@Test\\npublic void testInsertDuplicates() { \\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    MeuItem item1 = new MeuItem(5);\\n    MeuItem item2 = new MeuItem(5); // Duplicate item\\n    arvore.insere(item1);\\n    // This should just print an error and not throw an exception.\\n    arvore.insere(item2);\\n    assertNotNull(arvore.pesquisa(item1));\\n}\"},{\"methodName\":\"testRemoveLeafNode\",\"code\":\"@Test\\npublic void testRemoveLeafNode() throws Exception {\\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    MeuItem item1 = new MeuItem(5);\\n    MeuItem item2 = new MeuItem(3);\\n    arvore.insere(item1);\\n    arvore.insere(item2);\\n    arvore.retira(item2);\\n    assertNull(arvore.pesquisa(item2));\\n    assertNotNull(arvore.pesquisa(item1));\\n}\"},{\"methodName\":\"testRemoveNodeWithOneChild\",\"code\":\"@Test\\npublic void testRemoveNodeWithOneChild() throws Exception {\\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    MeuItem item1 = new MeuItem(5);\\n    MeuItem item2 = new MeuItem(3);\\n    MeuItem item3 = new MeuItem(4);\\n    arvore.insere(item1);\\n    arvore.insere(item2);\\n    arvore.insere(item3);\\n    arvore.retira(item2);\\n    assertNull(arvore.pesquisa(item2));\\n    assertNotNull(arvore.pesquisa(item3));\\n}\"},{\"methodName\":\"testRemoveRootNode\",\"code\":\"@Test\\npublic void testRemoveRootNode() throws Exception {\\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    MeuItem item1 = new MeuItem(5);\\n    MeuItem item2 = new MeuItem(3);\\n    MeuItem item3 = new MeuItem(7);\\n    arvore.insere(item1);\\n    arvore.insere(item2);\\n    arvore.insere(item3);\\n    arvore.retira(item1);\\n    assertNull(arvore.pesquisa(item1));\\n    assertNotNull(arvore.pesquisa(item2));\\n    assertNotNull(arvore.pesquisa(item3));\\n}\"},{\"methodName\":\"testInOrderTraversal\",\"code\":\"@Test\\npublic void testInOrderTraversal() { \\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    arvore.insere(new MeuItem(5));\\n    arvore.insere(new MeuItem(3));\\n    arvore.insere(new MeuItem(7));\\n    // Capture the output of central() : toString method of MeuItem should display numbers in order.\\n    // This will have to involve redirecting output or similar.\\n    // In practice, we would assert the printed numbers based on what's in the tree.\\n}\"},{\"methodName\":\"testBoundaryValues\",\"code\":\"@Test\\npublic void testBoundaryValues() throws Exception {\\n    ArvoreBinaria arvore = new ArvoreBinaria();\\n    int[] boundaryItems = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};\\n    for (int i : boundaryItems) {\\n        MeuItem item = new MeuItem(i);\\n        arvore.insere(item);\\n        assertNotNull(arvore.pesquisa(item));\\n    }\\n}\"}]}"