"{\"className\":\"CasamentoAproximadoTest\",\"testMethods\":[{\"methodName\":\"testShiftAndAproximado_ValidInput_ReturnsExpectedResult\",\"code\":\"@Test\\npublic void testShiftAndAproximado_ValidInput_ReturnsExpectedResult() {\\n    String T = \\\"ababcabc\\\";\\n    String P = \\\"abc\\\";\\n    int k = 1;\\n    int expectedPosition = 5; // Expected position of the pattern\\n    // Redirect System.out to capture printed output\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    String output = outContent.toString();\\n    assertTrue(output.contains(\\\"Casamento na posicao: c\\\")); // Check for the presence of expected output\\n}\"},{\"methodName\":\"testShiftAndAproximado_NoMatches_ReturnsNoOutput\",\"code\":\"@Test\\npublic void testShiftAndAproximado_NoMatches_ReturnsNoOutput() {\\n    String T = \\\"xyz\\\";\\n    String P = \\\"abc\\\";\\n    int k = 1;\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    String output = outContent.toString();\\n    assertEquals(\\\"\\n\\\", output); // No match should result in no output\\n}\"},{\"methodName\":\"testShiftAndAproximado_EmptyText_ReturnsNoOutput\",\"code\":\"@Test\\npublic void testShiftAndAproximado_EmptyText_ReturnsNoOutput() {\\n    String T = \\\"\\\";\\n    String P = \\\"abc\\\";\\n    int k = 1;\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    String output = outContent.toString();\\n    assertEquals(\\\"\\n\\\", output); // No output expected for empty text\\n}\"},{\"methodName\":\"testShiftAndAproximado_ExactMatch_ReturnsMatch\",\"code\":\"@Test\\npublic void testShiftAndAproximado_ExactMatch_ReturnsMatch() {\\n    String T = \\\"abcabcabc\\\";\\n    String P = \\\"abc\\\";\\n    int k = 0;\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    String output = outContent.toString();\\n    assertTrue(output.contains(\\\"Casamento na posicao: c\\\")); // First occurrence\\n}\"},{\"methodName\":\"testShiftAndAproximado_KGreaterThanM_ReturnsAllMatches\",\"code\":\"@Test\\npublic void testShiftAndAproximado_KGreaterThanM_ReturnsAllMatches() {\\n    String T = \\\"abababab\\\";\\n    String P = \\\"ab\\\";\\n    int k = 2;\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    String output = outContent.toString();\\n    assertTrue(output.contains(\\\"Casamento na posicao: b\\\")); // Check for matches with k>m\\n}\"},{\"methodName\":\"testShiftAndAproximado_NegativeK_ThrowsException\",\"code\":\"@Test\\npublic void testShiftAndAproximado_NegativeK_ThrowsException() {\\n    String T = \\\"abc\\\";\\n    String P = \\\"ab\\\";\\n    int k = -1;\\n    Exception exception = assertThrows(IllegalArgumentException.class, () -> {\\n        CasamentoAproximado.shiftAndAproximado(T, T.length(), P, P.length(), k);\\n    });\\n    String expectedMessage = \\\"k must be non-negative\\\";\\n    String actualMessage = exception.getMessage();\\n    assertTrue(actualMessage.contains(expectedMessage));\\n}\"}]}"