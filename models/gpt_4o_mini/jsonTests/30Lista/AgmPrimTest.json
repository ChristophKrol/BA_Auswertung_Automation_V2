"{\"className\":\"AgmPrimTest\",\"testMethods\":[{\"methodName\":\"testObterAgm_ValidRoot\",\"code\":\"@Test\\npublic void testObterAgm_ValidRoot() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    grafo.insereAresta(0, 1, 10);\\n    grafo.insereAresta(0, 2, 6);\\n    grafo.insereAresta(0, 3, 5);\\n    grafo.insereAresta(1, 3, 15);\\n    grafo.insereAresta(2, 3, 4);\\n\\n    AgmPrim agm = new AgmPrim(grafo);\\n    agm.obterAgm(0);\\n\\n    assertEquals(0, agm.antecessor(1));\\n    assertEquals(0, agm.antecessor(2));\\n    assertEquals(2, agm.antecessor(3));\\n}\"},{\"methodName\":\"testObterAgm_InvalidRoot\",\"code\":\"@Test\\npublic void testObterAgm_InvalidRoot() {\\n    Grafo grafo = new Grafo(5);\\n    AgmPrim agm = new AgmPrim(grafo);\\n    Exception exception = assertThrows(Exception.class, () -> { agm.obterAgm(-1); });\\n    assertEquals(\\\"Invalid root\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testAntecessor_ValidIndex\",\"code\":\"@Test\\npublic void testAntecessor_ValidIndex() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    grafo.insereAresta(0, 1, 10);\\n    AgmPrim agm = new AgmPrim(grafo);\\n    agm.obterAgm(0);\\n\\n    assertEquals(-1, agm.antecessor(0));\\n    assertNotEquals(-1, agm.antecessor(1));\\n}\"},{\"methodName\":\"testPeso_ValidIndex\",\"code\":\"@Test\\npublic void testPeso_ValidIndex() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    grafo.insereAresta(0, 1, 10);\\n    AgmPrim agm = new AgmPrim(grafo);\\n    agm.obterAgm(0);\\n    assertEquals(0.0, agm.peso(0));\\n    assertNotEquals(Double.MAX_VALUE, agm.peso(1));\\n}\"},{\"methodName\":\"testImprime\",\"code\":\"@Test\\npublic void testImprime() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    grafo.insereAresta(0, 1, 10);\\n    agm = new AgmPrim(grafo);\\n    agm.obterAgm(0);\\n    // Capture output and verify\\n    agm.imprime();\\n    // Verify console output or use a PrintStream to capture output\\n}\"},{\"methodName\":\"testDiminuiChave_NegativeNewValue\",\"code\":\"@Test\\npublic void testDiminuiChave_NegativeNewValue() throws Exception {\\n    FPHeapMinIndireto heap = new FPHeapMinIndireto(new double[]{Double.MAX_VALUE, 0}, new int[]{0, 1});\\n    Exception exception = assertThrows(Exception.class, () -> { heap.diminuiChave(1, -1); });\\n    assertEquals(\\\"Erro: chaveNova com valor incorreto\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testRetiraMin_EmptyHeap\",\"code\":\"@Test\\npublic void testRetiraMin_EmptyHeap() throws Exception {\\n    FPHeapMinIndireto heap = new FPHeapMinIndireto(new double[]{}, new int[]{0});\\n    Exception exception = assertThrows(Exception.class, () -> { heap.retiraMin(); });\\n    assertEquals(\\\"Erro: heap vazio\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testRetiraAresta_InvalidEdge\",\"code\":\"@Test\\npublic void testRetiraAresta_InvalidEdge() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    Exception exception = assertThrows(Exception.class, () -> { grafo.retiraAresta(0, 1); });\\n    assertEquals(\\\"Erro: Lista vazia ou chave invalida\\\", exception.getMessage());\\n}\"}]}"