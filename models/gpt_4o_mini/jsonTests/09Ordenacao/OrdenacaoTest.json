"{\"className\":\"OrdenacaoTest\",\"testMethods\":[{\"methodName\":\"testMergeSortWithSortedArray\",\"code\":\"@Test\\npublic void testMergeSortWithSortedArray() {\\n    int[] array = {1, 2, 3, 4, 5};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);\\n}\"},{\"methodName\":\"testMergeSortWithReverseSortedArray\",\"code\":\"@Test\\npublic void testMergeSortWithReverseSortedArray() {\\n    int[] array = {5, 4, 3, 2, 1};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);\\n}\"},{\"methodName\":\"testMergeSortWithDuplicates\",\"code\":\"@Test\\npublic void testMergeSortWithDuplicates() {\\n    int[] array = {3, 3, 2, 1, 2};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{1, 2, 2, 3, 3}, array);\\n}\"},{\"methodName\":\"testMergeSortWithEmptyArray\",\"code\":\"@Test\\npublic void testMergeSortWithEmptyArray() {\\n    int[] array = {};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{}, array);\\n}\"},{\"methodName\":\"testMergeSortWithSingleElementArray\",\"code\":\"@Test\\npublic void testMergeSortWithSingleElementArray() {\\n    int[] array = {5};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{5}, array);\\n}\"},{\"methodName\":\"testMergeSortWithNegativeValues\",\"code\":\"@Test\\npublic void testMergeSortWithNegativeValues() {\\n    int[] array = {-3, -1, -4, -2, -5};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{-5, -4, -3, -2, -1}, array);\\n}\"},{\"methodName\":\"testMergeSortWithMixedValues\",\"code\":\"@Test\\npublic void testMergeSortWithMixedValues() {\\n    int[] array = {1, -1, 0, 5, -5};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{-5, -1, 0, 1, 5}, array);\\n}\"},{\"methodName\":\"testMergeSortWithBoundaryValues\",\"code\":\"@Test\\npublic void testMergeSortWithBoundaryValues() {\\n    int[] array = {Integer.MIN_VALUE, Integer.MAX_VALUE, 0};\\n    Ordenacao.mergeSort(array, 0, array.length - 1);\\n    assertArrayEquals(new int[]{Integer.MIN_VALUE, 0, Integer.MAX_VALUE}, array);\\n}\"}]}"