"{\"className\":\"GrafoTest\",\"testMethods\":[{\"methodName\":\"testInsereAresta\",\"code\":\"@Test\\npublic void testInsereAresta() {\\n    Grafo grafo = new Grafo();\\n    grafo.insereAresta(0, 1, 10);\\n    // Verify if the edge was added\\n    assertTrue(grafo.existeAresta(0, 1));\\n}\"},{\"methodName\":\"testExisteAresta\",\"code\":\"@Test\\npublic void testExisteAresta() {\\n    Grafo grafo = new Grafo();\\n    grafo.insereAresta(2, 3, 5);\\n    assertTrue(grafo.existeAresta(2, 3));\\n    assertFalse(grafo.existeAresta(3, 2)); // Check reverse edge\\n}\"},{\"methodName\":\"testListaAdjVazia\",\"code\":\"@Test\\npublic void testListaAdjVazia() {\\n    Grafo grafo = new Grafo();\\n    assertTrue(grafo.listaAdjVazia(0)); // Should be empty initially\\n    grafo.insereAresta(0, 1, 10);\\n    assertFalse(grafo.listaAdjVazia(0)); // After adding, should not be empty\\n}\"},{\"methodName\":\"testPrimeiroListaAdj\",\"code\":\"@Test\\npublic void testPrimeiroListaAdj() {\\n    Grafo grafo = new Grafo();\\n    Aresta aresta;\\n    grafo.insereAresta(1, 2, 10);\\n    aresta = grafo.primeiroListaAdj(1);\\n    assertNotNull(aresta);\\n    assertEquals(1, aresta.v1());\\n    assertEquals(2, aresta.v2());\\n    assertEquals(10, aresta.peso());\\n    assertNull(grafo.primeiroListaAdj(3)); // No edges for vertex 3\\n}\"},{\"methodName\":\"testProxAdj\",\"code\":\"@Test\\npublic void testProxAdj() {\\n    Grafo grafo = new Grafo();\\n    grafo.insereAresta(1, 2, 10);\\n    grafo.insereAresta(1, 3, 20);\\n    Aresta aresta = grafo.primeiroListaAdj(1);\\n    assertEquals(2, aresta.v2());\\n    aresta = grafo.proxAdj(1);\\n    assertEquals(3, aresta.v2());\\n    aresta = grafo.proxAdj(1);\\n    assertNull(aresta); // No more adjacent edges\\n}\"},{\"methodName\":\"testRetiraAresta\",\"code\":\"@Test\\npublic void testRetiraAresta() throws Exception {\\n    Grafo grafo = new Grafo();\\n    grafo.insereAresta(4, 5, 15);\\n    Aresta aresta = grafo.retiraAresta(4, 5);\\n    assertNotNull(aresta);\\n    assertEquals(4, aresta.v1());\\n    assertEquals(5, aresta.v2());\\n    assertEquals(15, aresta.peso());\\n    assertFalse(grafo.existeAresta(4, 5)); // Validate removal\\n}\"},{\"methodName\":\"testNumVertices\",\"code\":\"@Test\\npublic void testNumVertices() {\\n    Grafo grafo = new Grafo();\\n    assertEquals(100, grafo.numVertices()); // Check default number of vertices\\n}\"},{\"methodName\":\"testGrafoTransposto\",\"code\":\"@Test\\npublic void testGrafoTransposto() {\\n    Grafo grafo = new Grafo();\\n    grafo.insereAresta(7, 8, 25);\\n    Grafo transposto = grafo.grafoTransposto();\\n    assertTrue(transposto.existeAresta(8, 7));\\n    assertFalse(transposto.existeAresta(7, 8));\\n}\"},{\"methodName\":\"testListaAdjVaziaException\",\"code\":\"@Test\\npublic void testListaAdjVaziaException() {\\n    Grafo grafo = new Grafo();\\n    assertThrows(Exception.class, () -> { \\n        grafo.retiraAresta(0, 1); // Should throw an exception since it's empty\\n    });\\n}\"}]}"