"{\"className\":\"BuscaEmLarguraTest\",\"testMethods\":[{\"methodName\":\"testVisitaBfsValidVertex\",\"code\":\"@Test\\nvoid testVisitaBfsValidVertex() throws Exception {\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    bfs.buscaEmLargura();\\n    assertEquals(1, bfs.d(1));\\n    assertEquals(2, bfs.d(2));\\n    assertEquals(0, bfs.d(0));\\n}\"},{\"methodName\":\"testVisitaBfsDisconnectedGraph\",\"code\":\"@Test\\nvoid testVisitaBfsDisconnectedGraph() throws Exception {\\n    Grafo grafo = new Grafo(5);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 0, 1);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    bfs.buscaEmLargura();\\n    assertEquals(0, bfs.d(0)); // starting node\\n    assertEquals(1, bfs.d(1));\\n    assertEquals(Integer.MAX_VALUE, bfs.d(2)); // disconnected\\n}\"},{\"methodName\":\"testPrintPathExists\",\"code\":\"@Test\\nvoid testPrintPathExists() {\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    grafo.insereAresta(1, 2, 1);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    bfs.buscaEmLargura();\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    bfs.imprimeCaminho(0, 2);\\n    String expectedOutput = \\\"0\\\\n1\\\\n2\\\\n\\\"; // output from visiting\\n    assertTrue(outContent.toString().contains(expectedOutput));\\n}\"},{\"methodName\":\"testPrintPathNotExists\",\"code\":\"@Test\\nvoid testPrintPathNotExists() {\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    bfs.buscaEmLargura();\\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\\n    System.setOut(new PrintStream(outContent));\\n    bfs.imprimeCaminho(0, 2);\\n    assertTrue(outContent.toString().contains(\\\"Nao existe caminho de 0 ate 2\\\"));\\n}\"},{\"methodName\":\"testDArrayInitialization\",\"code\":\"@Test\\nvoid testDArrayInitialization() throws Exception {\\n    Grafo grafo = new Grafo(3);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    bfs.buscaEmLargura();\\n    assertEquals(Integer.MAX_VALUE, bfs.d(0));\\n    assertEquals(Integer.MAX_VALUE, bfs.d(1));\\n    assertEquals(Integer.MAX_VALUE, bfs.d(2));\\n}\"},{\"methodName\":\"testNegativeVertexIndex\",\"code\":\"@Test\\nvoid testNegativeVertexIndex() {\\n    Grafo grafo = new Grafo(3);\\n    grafo.insereAresta(0, 1, 1);\\n    BuscaEmLargura bfs = new BuscaEmLargura(grafo);\\n    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\\n        bfs.d(-1);\\n    });\\n    assertEquals(\\\"Index -1 out of bounds for length 3\\\", exception.getMessage());\\n}\"}]}"