"{\"className\":\"PilhaTest\",\"testMethods\":[{\"methodName\":\"testEmpilha_ShouldThrowException_WhenPilhaIsFull\",\"code\":\"@Test\\npublic void testEmpilha_ShouldThrowException_WhenPilhaIsFull() throws Exception {\\n    Pilha pilha = new Pilha();\\n    // Fill the stack to its limit\\n    for (int i = 0; i < 1000; i++) {\\n        pilha.empilha(i);\\n    }\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        pilha.empilha(1001);\\n    });\\n    assertEquals(\\\"Erro: A pilha esta cheia\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testDesempilha_ShouldThrowException_WhenPilhaIsEmpty\",\"code\":\"@Test\\npublic void testDesempilha_ShouldThrowException_WhenPilhaIsEmpty() throws Exception {\\n    Pilha pilha = new Pilha();\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        pilha.desempilha();\\n    });\\n    assertEquals(\\\"Erro: A pilha esta vazia\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testVazia_ShouldReturnTrue_WhenPilhaIsEmpty\",\"code\":\"@Test\\npublic void testVazia_ShouldReturnTrue_WhenPilhaIsEmpty() {\\n    Pilha pilha = new Pilha();\\n    assertTrue(pilha.vazia());\\n}\"},{\"methodName\":\"testVazia_ShouldReturnFalse_WhenPilhaIsNotEmpty\",\"code\":\"@Test\\npublic void testVazia_ShouldReturnFalse_WhenPilhaIsNotEmpty() throws Exception {\\n    Pilha pilha = new Pilha();\\n    pilha.empilha(new Object());\\n    assertFalse(pilha.vazia());\\n}\"},{\"methodName\":\"testTamanho_ShouldReturnCorrectSize_WhenItemsAreAdded\",\"code\":\"@Test\\npublic void testTamanho_ShouldReturnCorrectSize_WhenItemsAreAdded() throws Exception {\\n    Pilha pilha = new Pilha();\\n    assertEquals(0, pilha.tamanho());\\n    pilha.empilha(new Object());\\n    assertEquals(1, pilha.tamanho());\\n    pilha.empilha(new Object());\\n    assertEquals(2, pilha.tamanho());\\n    pilha.desempilha();\\n    assertEquals(1, pilha.tamanho());\\n}\"},{\"methodName\":\"testEmpilha_ShouldAddItem_WhenStackIsNotFull\",\"code\":\"@Test\\npublic void testEmpilha_ShouldAddItem_WhenStackIsNotFull() throws Exception {\\n    Pilha pilha = new Pilha();\\n    pilha.empilha(\\\"item1\\\");\\n    assertEquals(\\\"item1\\\", pilha.item[0]);\\n    pilha.empilha(\\\"item2\\\");\\n    assertEquals(\\\"item2\\\", pilha.item[1]);\\n}\"},{\"methodName\":\"testDesempilha_ShouldReturnLastItem_WhenPilhaHasItems\",\"code\":\"@Test\\npublic void testDesempilha_ShouldReturnLastItem_WhenPilhaHasItems() throws Exception {\\n    Pilha pilha = new Pilha();\\n    pilha.empilha(\\\"item1\\\");\\n    pilha.empilha(\\\"item2\\\");\\n    assertEquals(\\\"item2\\\", pilha.desempilha());\\n    assertEquals(\\\"item1\\\", pilha.desempilha());\\n}\"},{\"methodName\":\"testBoundaryValues\",\"code\":\"@Test\\npublic void testBoundaryValues() throws Exception {\\n    Pilha pilha = new Pilha();\\n    for (int i = 0; i < 999; i++) {\\n        pilha.empilha(i);\\n    }\\n    assertFalse(pilha.vazia());\\n    pilha.desempilha(); // Test removing the last item\\n    assertEquals(998, pilha.tamanho());\\n}\"}]}"