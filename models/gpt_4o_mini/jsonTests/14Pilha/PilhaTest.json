"{\"className\":\"PilhaTest\",\"testMethods\":[{\"methodName\":\"testEmpilhaAndTamanho\",\"code\":\"@Test\\npublic void testEmpilhaAndTamanho() {\\n    Pilha pilha = new Pilha();\\n    assertEquals(0, pilha.tamanho());\\n    pilha.empilha(\\\"item1\\\");\\n    assertEquals(1, pilha.tamanho());\\n    pilha.empilha(\\\"item2\\\");\\n    assertEquals(2, pilha.tamanho());\\n    pilha.empilha(\\\"item3\\\");\\n    assertEquals(3, pilha.tamanho());\\n}\"},{\"methodName\":\"testDesempilha\",\"code\":\"@Test\\npublic void testDesempilha() throws Exception {\\n    Pilha pilha = new Pilha();\\n    pilha.empilha(\\\"item1\\\");\\n    pilha.empilha(\\\"item2\\\");\\n    \\n    assertEquals(\\\"item2\\\", pilha.desempilha());\\n    assertEquals(1, pilha.tamanho());\\n    \\n    assertEquals(\\\"item1\\\", pilha.desempilha());\\n    assertEquals(0, pilha.tamanho());\\n}\"},{\"methodName\":\"testDesempilhaVazia\",\"code\":\"@Test\\npublic void testDesempilhaVazia() {\\n    Pilha pilha = new Pilha();\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        pilha.desempilha();\\n    });\\n    assertEquals(\\\"Erro: A pilha esta vazia\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testVazia\",\"code\":\"@Test\\npublic void testVazia() {\\n    Pilha pilha = new Pilha();\\n    assertTrue(pilha.vazia());\\n    pilha.empilha(\\\"item1\\\");\\n    assertFalse(pilha.vazia());\\n    pilha.desempilha();\\n    assertTrue(pilha.vazia());\\n}\"},{\"methodName\":\"testBoundaryTamanho\",\"code\":\"@Test\\npublic void testBoundaryTamanho() {\\n    Pilha pilha = new Pilha();\\n    assertEquals(0, pilha.tamanho());  \\n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\\n        pilha.empilha(i);\\n    }\\n    assertEquals(Integer.MAX_VALUE, pilha.tamanho());\\n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\\n        pilha.desempilha();\\n    }\\n    assertEquals(0, pilha.tamanho());\\n}\"},{\"methodName\":\"testMultipleEmpilhaAndDesempilha\",\"code\":\"@Test\\npublic void testMultipleEmpilhaAndDesempilha() throws Exception {\\n    Pilha pilha = new Pilha();\\n    for (int i = 0; i < 100; i++) {\\n        pilha.empilha(i);\\n    }\\n    for (int i = 99; i >= 0; i--) {\\n        assertEquals(i, pilha.desempilha());\\n    }\\n    assertTrue(pilha.vazia());\\n}\"}]}"