"{\"className\":\"FibonacciTest\",\"testMethods\":[{\"methodName\":\"testFibIterPositiveBoundaryCaseZero\",\"code\":\"@Test\\npublic void testFibIterPositiveBoundaryCaseZero() {\\n    int result = Fibonacci.fibIter(0);\\n    assertEquals(0, result);\\n}\"},{\"methodName\":\"testFibIterPositiveBoundaryCaseOne\",\"code\":\"@Test\\npublic void testFibIterPositiveBoundaryCaseOne() {\\n    int result = Fibonacci.fibIter(1);\\n    assertEquals(1, result);\\n}\"},{\"methodName\":\"testFibIterPositiveValues\",\"code\":\"@Test\\npublic void testFibIterPositiveValues() {\\n    assertEquals(5, Fibonacci.fibIter(5));\\n    assertEquals(21, Fibonacci.fibIter(8));\\n}\"},{\"methodName\":\"testFibIterNegativeValues\",\"code\":\"@Test\\npublic void testFibIterNegativeValues() {\\n    Exception exception = assertThrows(IllegalArgumentException.class, () -> {\\n        Fibonacci.fibIter(-1);\\n    });\\n    assertEquals(\\\"Input must be non-negative.\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testFibIterLargeInput\",\"code\":\"@Test\\npublic void testFibIterLargeInput() throws Exception {\\n    int result = Fibonacci.fibIter(30);\\n    assertEquals(832040, result);\\n}\"},{\"methodName\":\"testFibIterLoopConditionFalse\",\"code\":\"@Test\\npublic void testFibIterLoopConditionFalse() {\\n    int result = Fibonacci.fibIter(2);\\n    assertEquals(1, result);\\n}\"},{\"methodName\":\"testFibIterLoopEmptyCondition\",\"code\":\"@Test\\npublic void testFibIterLoopEmptyCondition() {\\n    int result = Fibonacci.fibIter(3);\\n    assertEquals(2, result);\\n}\"}]}"