"{\"className\":\"OrdenacaoTest\",\"testMethods\":[{\"methodName\":\"testOrdensAscendente\",\"code\":\"@Test\\nvoid testOrdensAscendente() {\\n    int[] v = {5, 3, 8, 6};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{3, 5, 6, 8}, v);\\n}\"},{\"methodName\":\"testOrdensDescendente\",\"code\":\"@Test\\nvoid testOrdensDescendente() {\\n    int[] v = {8, 6, 5, 3};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{3, 5, 6, 8}, v);\\n}\"},{\"methodName\":\"testOrdensRepetido\",\"code\":\"@Test\\nvoid testOrdensRepetido() {\\n    int[] v = {3, 3, 2, 1};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{1, 2, 3, 3}, v);\\n}\"},{\"methodName\":\"testOrdensVazia\",\"code\":\"@Test\\nvoid testOrdensVazia() {\\n    int[] v = {};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{}, v);\\n}\"},{\"methodName\":\"testOrdensUmElemento\",\"code\":\"@Test\\nvoid testOrdensUmElemento() {\\n    int[] v = {42};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{42}, v);\\n}\"},{\"methodName\":\"testOrdensNegativos\",\"code\":\"@Test\\nvoid testOrdensNegativos() {\\n    int[] v = {5, -1, 0, -10};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{-10, -1, 0, 5}, v);\\n}\"},{\"methodName\":\"testOrdensMisturados\",\"code\":\"@Test\\nvoid testOrdensMisturados() {\\n    int[] v = {0, -5, 3, -2, 8};\\n    int n = v.length;\\n    Ordenacao.ordena(v, n);\\n    assertArrayEquals(new int[]{-5, -2, 0, 3, 8}, v);\\n}\"}]}"