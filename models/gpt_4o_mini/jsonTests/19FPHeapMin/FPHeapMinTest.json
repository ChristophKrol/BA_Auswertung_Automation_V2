"{\"className\":\"FPHeapMinTest\",\"testMethods\":[{\"methodName\":\"testFPHeapMinConstructorWithSize\",\"code\":\"@Test\\npublic void testFPHeapMinConstructorWithSize() {\\n    FPHeapMin heap = new FPHeapMin(10);\\n    assertNotNull(heap);\\n}\"},{\"methodName\":\"testFPHeapMinConstructorWithArray\",\"code\":\"@Test\\npublic void testFPHeapMinConstructorWithArray() {\\n    Item[] items = new Item[]{new MeuItem(1), new MeuItem(2)};\\n    FPHeapMin heap = new FPHeapMin(items);\\n    assertEquals(1, heap.min().compara(new MeuItem(1)));\\n}\"},{\"methodName\":\"testRefaz\",\"code\":\"@Test\\npublic void testRefaz() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(10);\\n    heap.insere(new MeuItem(3));\\n    heap.insere(new MeuItem(5));\\n    heap.insere(new MeuItem(2));\\n    heap.refaz(1, heap.n);\\n    assertEquals(2, heap.min().compara(new MeuItem(2)));\\n}\"},{\"methodName\":\"testConstroi\",\"code\":\"@Test\\npublic void testConstroi() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(10);\\n    heap.insere(new MeuItem(4));\\n    heap.insere(new MeuItem(3));\\n    heap.insere(new MeuItem(2));\\n    heap.insere(new MeuItem(1));\\n    heap.constroi();\\n    assertEquals(1, heap.min().compara(new MeuItem(1)));\\n}\"},{\"methodName\":\"testMin\",\"code\":\"@Test\\npublic void testMin() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    heap.insere(new MeuItem(10));\\n    heap.insere(new MeuItem(5));\\n    assertEquals(5, heap.min().compara(new MeuItem(5)));\\n}\"},{\"methodName\":\"testRetiraMinHeapNotEmpty\",\"code\":\"@Test\\npublic void testRetiraMinHeapNotEmpty() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    heap.insere(new MeuItem(1));\\n    heap.insere(new MeuItem(5));\\n    MeuItem min = (MeuItem) heap.retiraMin();\\n    assertEquals(1, min.compara(new MeuItem(1)));\\n}\"},{\"methodName\":\"testRetiraMinHeapEmptyThrowsException\",\"code\":\"@Test\\npublic void testRetiraMinHeapEmptyThrowsException() {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        heap.retiraMin();\\n    });\\n    assertEquals(\\\"Erro: heap vazio\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testDiminuiChaveWithValidKey\",\"code\":\"@Test\\npublic void testDiminuiChaveWithValidKey() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    MeuItem item = new MeuItem(5);\\n    heap.insere(item);\\n    heap.diminuiChave(1, 2);\\n    assertEquals(2, item.compara(new MeuItem(2)));\\n}\"},{\"methodName\":\"testDiminuiChaveWithNullThrowsException\",\"code\":\"@Test\\npublic void testDiminuiChaveWithNullThrowsException() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    heap.insere(new MeuItem(5));\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        heap.diminuiChave(1, null);\\n    });\\n    assertEquals(\\\"Erro: chaveNova com valor null\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testInsereWithValidItem\",\"code\":\"@Test\\npublic void testInsereWithValidItem() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    heap.insere(new MeuItem(3));\\n    assertEquals(3, heap.min().compara(new MeuItem(3)));\\n}\"},{\"methodName\":\"testInsereHeapFullThrowsException\",\"code\":\"@Test\\npublic void testInsereHeapFullThrowsException() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(2);\\n    heap.insere(new MeuItem(1));\\n    heap.insere(new MeuItem(2));\\n    Exception exception = assertThrows(Exception.class, () -> {\\n        heap.insere(new MeuItem(3));\\n    });\\n    assertEquals(\\\"Erro: heap cheio\\\", exception.getMessage());\\n}\"},{\"methodName\":\"testImprime\",\"code\":\"@Test\\npublic void testImprime() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    heap.insere(new MeuItem(1));\\n    heap.insere(new MeuItem(2));\\n    assertDoesNotThrow(() -> heap.imprime());\\n}\"},{\"methodName\":\"testCopia\",\"code\":\"@Test\\npublic void testCopia() throws Exception {\\n    FPHeapMin heap = new FPHeapMin(5);\\n    Item[] items = {new MeuItem(1), new MeuItem(2), new MeuItem(3)};\\n    heap.copia(items);\\n    assertEquals(3, heap.n);\\n}\"}]}"