"{\"className\":\"TabelaHashTest\",\"testMethods\":[{\"methodName\":\"testInserirElementoComChaveUnica\",\"code\":\"@Test\\nvoid testInserirElementoComChaveUnica() {\\n    TabelaHash tabela = new TabelaHash();\\n    MeuItem meuItem = new MeuItem(1);\\n    tabela.insere(\\\"chave1\\\", meuItem);\\n    assertEquals(meuItem, tabela.pesquisa(\\\"chave1\\\"));\\n}\"},{\"methodName\":\"testInserirElementoComChaveDuplicada\",\"code\":\"@Test\\nvoid testInserirElementoComChaveDuplicada() {\\n    TabelaHash tabela = new TabelaHash();\\n    MeuItem meuItem1 = new MeuItem(1);\\n    MeuItem meuItem2 = new MeuItem(2);\\n    tabela.insere(\\\"chave1\\\", meuItem1);\\n    tabela.insere(\\\"chave1\\\", meuItem2); // Tentativa de inserir chave duplicada\\n    assertEquals(meuItem1, tabela.pesquisa(\\\"chave1\\\")); // deve permanecer o primeiro\\n}\"},{\"methodName\":\"testRemoverElementoPresente\",\"code\":\"@Test\\nvoid testRemoverElementoPresente() throws Exception {\\n    TabelaHash tabela = new TabelaHash();\\n    MeuItem meuItem = new MeuItem(1);\\n    tabela.insere(\\\"chave1\\\", meuItem);\\n    tabela.retira(\\\"chave1\\\");\\n    assertNull(tabela.pesquisa(\\\"chave1\\\"));\\n}\"},{\"methodName\":\"testRemoverElementoNaoPresente\",\"code\":\"@Test\\nvoid testRemoverElementoNaoPresente() throws Exception {\\n    TabelaHash tabela = new TabelaHash();\\n    try {\\n        tabela.retira(\\\"chaveNaoPresente\\\"); // deve lan\u00e7ar uma exce\u00e7\u00e3o\\n        fail(\\\"Deveria jogar uma exce\u00e7\u00e3o\\\");\\n    } catch (Exception e) {\\n        assertEquals(\\\"Registro nao esta presente\\\", e.getMessage());\\n    }\\n}\"},{\"methodName\":\"testRecuperaItensComEspacosVazios\",\"code\":\"@Test\\nvoid testRecuperaItensComEspacosVazios() throws Exception {\\n    TabelaHash tabela = new TabelaHash();\\n    MeuItem meuItem1 = new MeuItem(1);\\n    MeuItem meuItem2 = new MeuItem(2);\\n    tabela.insere(\\\"chave1\\\", meuItem1);\\n    tabela.insere(\\\"chave2\\\", meuItem2);\\n    tabela.retira(\\\"chave1\\\");\\n    Object[] itens = tabela.recuperaItens();\\n    assertEquals(1, itens.length);\\n    assertEquals(meuItem2, itens[0]);\\n}\"},{\"methodName\":\"testInserirNaTabelaCheia\",\"code\":\"@Test\\nvoid testInserirNaTabelaCheia() {\\n    TabelaHash tabela = new TabelaHash();\\n    // Preencher a tabela at\u00e9 o limite\\n    for (int i = 0; i < 7; i++) {\\n        tabela.insere(\\\"chave\\\" + i, new MeuItem(i));\\n    }\\n    // Tentar inserir na tabela cheia\\n    tabela.insere(\\\"chave8\\\", new MeuItem(8)); // Deve imprimir \\\"Tabela cheia\\\"\\n    assertNull(tabela.pesquisa(\\\"chave8\\\"));\\n}\"},{\"methodName\":\"testPesquisandoElementoNaoExistente\",\"code\":\"@Test\\nvoid testPesquisandoElementoNaoExistente() {\\n    TabelaHash tabela = new TabelaHash();\\n    assertNull(tabela.pesquisa(\\\"chaveInexistente\\\"));\\n}\"},{\"methodName\":\"testRemoverComKeyNull\",\"code\":\"@Test\\nvoid testRemoverComKeyNull() throws Exception {\\n    TabelaHash tabela = new TabelaHash();\\n    try {\\n        tabela.retira(null);\\n        fail(\\\"Deveria lan\u00e7ar exce\u00e7\u00e3o\\\");\\n    } catch (Exception e) {\\n        assertNotNull(e);\\n    }\\n}\"},{\"methodName\":\"testImprimeTabela\",\"code\":\"@Test\\nvoid testImprimeTabela() {\\n    TabelaHash tabela = new TabelaHash();\\n    MeuItem meuItem1 = new MeuItem(1);\\n    MeuItem meuItem2 = new MeuItem(2);\\n    tabela.insere(\\\"chave1\\\", meuItem1);\\n    tabela.insere(\\\"chave2\\\", meuItem2);\\n    // M\u00e9todo imprime n\u00e3o retorna nada, mas podemos verificar se a impress\u00e3o ocorre sem exce\u00e7\u00f5es.\\n    assertDoesNotThrow(() -> tabela.imprime());\\n}\"}]}"